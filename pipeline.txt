pipeline {
    agent any
    parameters {
        choice(name: 'ENV', choices: ['dev', 'prod'], description: 'Select Environment')
    }

    environment {
        IMAGE_NAME = "nginx-app"
        AWS_ACCOUNT_ID = 'your-aws-account-id'
        AWS_REGION = 'us-east-1'
        ECR_REPO = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${IMAGE_NAME}"
        CONTAINER_PORT = '80'
    }

    stages {
        stage('Clone Code') {
            steps {
                git url: 'https://github.com/your-user/your-repo.git', branch: 'main'
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    sh "docker build -t ${IMAGE_NAME}:${ENV} ."
                }
            }
        }

        stage('Test Container') {
            steps {
                script {
                    sh "docker run -d -p 8080:${CONTAINER_PORT} --name temp_container ${IMAGE_NAME}:${ENV}"
                    sleep 5
                    sh "curl -s -o /dev/null -w '%{http_code}' http://localhost:8080 | grep 200"
                    sh "docker stop temp_container && docker rm temp_container"
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    sh '''
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
                        docker tag ${IMAGE_NAME}:${ENV} ${ECR_REPO}:${ENV}
                        docker push ${ECR_REPO}:${ENV}
                    '''
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    sh "docker run -d -p 8081:${CONTAINER_PORT} --name deployed_container_${ENV} ${ECR_REPO}:${ENV}"
                    script {
                        def ip = sh(script: "hostname -I | awk '{print $1}'", returnStdout: true).trim()
                        echo "App running at: http://${ip}:8081"
                    }
                }
            }
        }
    }
}



